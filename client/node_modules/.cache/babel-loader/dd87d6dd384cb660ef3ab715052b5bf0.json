{"ast":null,"code":"var _jsxFileName = \"/Users/mustafamustafa/Desktop/MERN_GoogleBooks-main/client/src/pages/SearchPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport SearchBar from \"../components/SearchBar/SearchBar\";\nimport Results from \"../components/Results/Results\";\nimport BookCardSearched from \"../components/BookCard/BookCardSearched\";\nimport API from \"../utils/API\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SearchPage = () => {\n  _s();\n\n  const [search, setSearch] = useState(\"\");\n  const [results, setResults] = useState([]);\n\n  const handleInputChange = event => {\n    setSearch(event.target.value);\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    API.getBook(search).then(res => {\n      console.log(res.data.items);\n      const bookFields = res.data.items.map(item => {\n        let thumbnail = item.volumeInfo.imageLinks ? item.volumeInfo.imageLinks.thumbnail : \"\";\n        return {\n          id: item.id,\n          title: item.volumeInfo.title,\n          authors: item.volumeInfo.authors,\n          description: item.volumeInfo.description,\n          image: thumbnail,\n          link: item.volumeInfo.infoLink\n        };\n      });\n      console.log(bookFields);\n      setResults(bookFields);\n    });\n    setSearch(\"\");\n  }; // Makes the API call to save a book to our db\n\n\n  const saveBook = async event => {\n    event.preventDefault();\n    let newBook = {\n      apiId: event.target.dataset.id,\n      title: event.target.dataset.title,\n      authors: event.target.dataset.authors,\n      description: event.target.dataset.description,\n      image: event.target.dataset.image,\n      link: event.target.dataset.link\n    };\n    console.log(newBook);\n    const bookList = await getSavedBooks(); // Checks to see if book is already saved and alerts the user if so\n\n    console.log(`Book count: ${bookList.length}`);\n\n    for (let i = 0; i < bookList.length; i++) {\n      console.log(bookList[i].apiId);\n\n      if (bookList[i].apiId === newBook.apiId) {\n        alert(\"Book is already saved!\");\n        return;\n      }\n    }\n\n    API.saveBook(newBook).then(res => console.log(res)).catch(err => console.log(err));\n    ;\n  };\n\n  const getSavedBooks = async () => {\n    try {\n      const res = await API.getBooks();\n      return res.data;\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      handleInputChange: handleInputChange,\n      handleFormSubmit: handleFormSubmit,\n      searchInput: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), results.length ? /*#__PURE__*/_jsxDEV(Results, {\n      children: results.map(item => {\n        let authors = item.authors ? item.authors.join(\", \") : \"\";\n        return /*#__PURE__*/_jsxDEV(BookCardSearched, {\n          id: item.id,\n          title: item.title,\n          authors: authors,\n          description: item.description,\n          image: item.image,\n          link: item.link,\n          saveBook: saveBook\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 32\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SearchPage, \"3fJ6m3kQMV96q9niWjXKlYFE18U=\");\n\n_c = SearchPage;\nexport default SearchPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"sources":["/Users/mustafamustafa/Desktop/MERN_GoogleBooks-main/client/src/pages/SearchPage.js"],"names":["React","useState","SearchBar","Results","BookCardSearched","API","SearchPage","search","setSearch","results","setResults","handleInputChange","event","target","value","handleFormSubmit","preventDefault","getBook","then","res","console","log","data","items","bookFields","map","item","thumbnail","volumeInfo","imageLinks","id","title","authors","description","image","link","infoLink","saveBook","newBook","apiId","dataset","bookList","getSavedBooks","length","i","alert","catch","err","getBooks","join"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport SearchBar from \"../components/SearchBar/SearchBar\";\nimport Results from \"../components/Results/Results\";\nimport BookCardSearched from \"../components/BookCard/BookCardSearched\";\nimport API from \"../utils/API\";\n\nconst SearchPage = () => {\n    const [search, setSearch] = useState(\"\")\n    const [results, setResults] = useState([])\n\n\n    const handleInputChange = event => {\n        setSearch(event.target.value)\n    }\n\n    const handleFormSubmit = event => {\n        event.preventDefault();\n      \n\n        API.getBook(search)\n            .then(res => {\n                console.log(res.data.items);\n\n                const bookFields = res.data.items.map(item => {\n                    let thumbnail = (item.volumeInfo.imageLinks) ? item.volumeInfo.imageLinks.thumbnail : \"\";\n\n                    return {\n                        id: item.id,\n                        title: item.volumeInfo.title,\n                        authors: item.volumeInfo.authors,\n                        description: item.volumeInfo.description,\n                        image: thumbnail,\n                        link: item.volumeInfo.infoLink\n                    }\n                })\n\n                console.log(bookFields);\n\n                setResults(bookFields)\n            })\n\n            setSearch(\"\")\n    }\n\n    // Makes the API call to save a book to our db\n    const saveBook = async (event) => {\n        event.preventDefault();\n\n        let newBook = {\n            apiId: event.target.dataset.id,\n            title: event.target.dataset.title,\n            authors: event.target.dataset.authors,\n            description: event.target.dataset.description,\n            image: event.target.dataset.image,\n            link: event.target.dataset.link\n        }\n\n        console.log(newBook)\n\n        const bookList = await getSavedBooks();\n\n        // Checks to see if book is already saved and alerts the user if so\n        console.log(`Book count: ${bookList.length}`)\n        for (let i = 0; i < bookList.length; i++) {\n            console.log(bookList[i].apiId)\n            if (bookList[i].apiId === newBook.apiId) {\n                alert(\"Book is already saved!\")\n                return;\n            }\n        }\n\n        API.saveBook(newBook)\n            .then(res =>\n                console.log(res)\n            )\n            .catch(err => console.log(err));;\n    }\n\n    const getSavedBooks = async () => {\n        try {\n            const res = await API.getBooks()\n            return res.data;\n        } catch (err) {\n            console.log(err);\n            return;\n        }\n    };\n\n    return (\n        <>\n            <SearchBar\n                handleInputChange={handleInputChange}\n                handleFormSubmit={handleFormSubmit}\n                searchInput={search}\n            />\n\n            {results.length ? (\n                <Results>\n                    {results.map((item) => {\n                       \n                        let authors = (item.authors) ? item.authors.join(\", \") : \"\";\n\n                        return <BookCardSearched\n                            id={item.id}\n                            key={item.id}\n                            title={item.title}\n                            authors={authors}\n                            description={item.description}\n                            image={item.image}\n                            link={item.link}\n                            saveBook={saveBook}\n                        />\n                    }\n                    )}\n                </Results>\n            ) : (\n                   <p></p>\n                )}\n        </>\n    )\n}\n\nexport default SearchPage;"]},"metadata":{},"sourceType":"module"}